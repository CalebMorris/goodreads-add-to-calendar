/* global window */
var publicationMatch = /^\s*Expected publication/i;
var dateFormat = /([A-Z][a-z]+) (\d{1,2})[a-z]{2,3} (\d{4})/i;
var urlFormat = /book\/show\/\d+-(.*)$/;

function getBookTitle() {
  var selector = document.querySelector('.bookTitle');
  if (! selector) {
    var match = urlFormat.exec(window.location.href);
    if (! match) { return 'Unknown'; }
    return match[1];
  }
  return selector.textContent.replace(/\s+/g, ' ').trim();
}

function generateDescription(book, link) {
  return 'Release Date of `' + book + '`\n' +
    'Link: ' + link + '\n\n' +
    'generated by `goodreads-add-to-calendar`';
}

function formatDate(date) {
  if (date.month.length === 1) {
    date.month = '0' + date.month;
  }

  if (date.day < 10) {
    date.day = '0' + date.day;
  }

  return date.year + date.month + date.day;
}

function generateCalendarEvent(date, datePlusDay, book, link) {
  var base = 'https://www.google.com/calendar/render?action=TEMPLATE';
  var titleKey = '&text=';
  var datesKey = '&dates=';
  var dateSeparator = '/';
  var descriptionKey = '&details=';
  var stringGenerated = base +
    titleKey + 'Goodreads - ' + book.replace(/#/, '') +
    datesKey + formatDate(date) + dateSeparator + formatDate(datePlusDay) +
    descriptionKey + generateDescription(book, link).replace(/#/, '');
  return encodeURI(stringGenerated);
}

function constructCalendar() {
  var calendar = document.createElement('span');
  calendar.setAttribute('class', 'goodreads-calendar');

  var stiches = document.createElement('span');
  stiches.setAttribute('class', 'binds');

  var header = document.createElement('span');
  header.setAttribute('class', 'month');

  var date = document.createElement('span');
  date.setAttribute('class', 'day');

  calendar.appendChild(stiches);
  calendar.appendChild(header);
  calendar.appendChild(date);

  return calendar;
}

function attachEventButton(publicationDate) {
  var date = publicationDate.date;
  var element = publicationDate.element;
  var datePlusOne = { year : date.year, month : date.month, day : date.day + 1 };
  var calendarEvent = generateCalendarEvent(
    date,
    datePlusOne,
    getBookTitle(),
    window.location.href
  );

  var button = document.createElement('a');
  button.setAttribute('href', calendarEvent);
  button.setAttribute('target', '_blank');
  button.appendChild(constructCalendar());

  element.appendChild(button);
}

function extractDate(detailText) {
  var match = dateFormat.exec(detailText);
  if (! match) { return null; }
  var monthName = match[1];
  var day = match[2];
  var year = match[3];
  var constructed = new Date(year + ' ' + day + ' ' + monthName);
  var month = (constructed.getMonth() + 1).toString();
  return { month : month, day : constructed.getDate(), year : year };
}

function findPublicationDateIfExists(details) {
  for (var i = 0; i < details.length; i++) {
    var detail = details[i].textContent;
    if (publicationMatch.test(detail)) {
      console.log('found match', detail);
      var date = extractDate(detail);
      if (! date) {
        console.error('Failed to extract date from: `' + detail + '`');
        return null;
      }
      return { element : details[i], date : date };
    }
  };

  console.log('Unable to find future publication date');

  return null;
}

function main() {
  console.log('starting');
  var details = document.querySelectorAll('#details > div');
  var publicationDate = findPublicationDateIfExists(details);
  if (! publicationDate) {
    console.log('no publication date');
  } else {
    attachEventButton(publicationDate);
  }
}

console.log('main');
main();
